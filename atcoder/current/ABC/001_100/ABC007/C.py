import sys
from io import StringIO
import unittest


class TestClass(unittest.TestCase):
    def assertIO(self, input, output):
        stdout, stdin = sys.stdout, sys.stdin
        sys.stdout, sys.stdin = StringIO(), StringIO(input)
        resolve()
        sys.stdout.seek(0)
        out = sys.stdout.read()[:-1]
        sys.stdout, sys.stdin = stdout, stdin
        self.assertEqual(out, output)

    def test_入力例1(self):
        input = """7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########"""
        output = """11"""
        self.assertIO(input, output)

    def test_入力例2(self):
        input = """5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########"""
        output = """10"""
        self.assertIO(input, output)

    def test_入力例3(self):
        input = """50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################"""
        output = """94"""
        self.assertIO(input, output)

def resolve():
  from collections import deque
  dx = [-1, 0, 1, 0]
  dy = [0, -1, 0, 1]

  R, C = map(int, input().split(" "))
  start = tuple([int(x)-1 for x in input().split(" ")])
  goal = tuple([int(x)-1 for x in input().split(" ")])
  maze = [[x=="." for x in list(input())] for _ in range(R)]
  step = [[0]*C for _ in range(R)]

  next_points = deque([start])
  x, y = start
  step[x][y] = 0

  while next_points:
    x, y = next_points.popleft()
    for i in range(4):
      x_ = x + dx[i]
      y_ = y + dy[i]
      if maze[x_][y_]:
        next_points.append((x_, y_))
        maze[x_][y_]=False
        step[x_][y_]=step[x][y]+1

  x, y = goal
  print(step[x][y])

resolve()

if __name__ == "__main__":
    unittest.main()
